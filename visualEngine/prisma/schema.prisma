generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model lecture_plans {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  lecture_id BigInt?   @db.UnsignedBigInt
  week_day   Int?
  start_time DateTime? @db.Time(0)
  end_time   DateTime? @db.Time(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model lecture_users {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  lecture_id BigInt?   @db.UnsignedBigInt
  user_id    BigInt?   @db.UnsignedBigInt
  role_id    BigInt?   @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model lectures {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String    @db.VarChar(255)
  school_id  BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model roles {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String?   @db.VarChar(255)
  slug        String?   @db.VarChar(255)
  permissions Json?
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  users       users[]
}

model schools {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  role_id           BigInt?   @db.UnsignedBigInt
  school_id         BigInt?   @db.UnsignedBigInt
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  roles             roles?    @relation(fields: [role_id], references: [id], onUpdate: NoAction, map: "users_role_id_foreign")
  schools           schools?  @relation(fields: [school_id], references: [id], onUpdate: NoAction, map: "users_school_id_foreign")
  videos            videos[]

  @@index([role_id], map: "users_role_id_foreign")
  @@index([school_id], map: "users_school_id_foreign")
}

model videos {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  user_id      BigInt?        @db.UnsignedBigInt
  title        String         @db.VarChar(255)
  path         String         @db.LongText
  status       videos_status  @default(pending)
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  video_frames video_frames[]
  users        users?         @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "videos_user_id_foreign")

  @@index([user_id], map: "videos_user_id_foreign")
}

model video_frames {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  video_id   BigInt?   @db.UnsignedBigInt
  time       Float
  path       String    @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  videos     videos?   @relation(fields: [video_id], references: [id], onUpdate: NoAction, map: "video_frames_video_id_foreign")

  @@index([video_id], map: "video_frames_video_id_foreign")
}

enum videos_status {
  pending
  processing
  done
  failed
}
